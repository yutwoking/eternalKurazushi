/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package eternalKurazushi;

import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.ResourceBundle;

import org.apache.commons.lang3.StringUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.seasar.doma.jdbc.tx.TransactionManager;

import eternalKurazushi.dao.MenuDao;
import eternalKurazushi.dao.MenuDaoImpl;
import eternalKurazushi.dao.RDBConfig;
import eternalKurazushi.model.MenuModel;

public class LoadMenu {

    public static void init() throws IOException {

    	ResourceBundle rb = ResourceBundle.getBundle("application");
    	String url = rb.getString("menu.url");
    	List<MenuModel> models = loadMenuFromSite(url);

    	RegisterToRDB(models);
    	System.out.println("load menu from site finished");
    }

    private static List<MenuModel>  loadMenuFromSite(String url) throws IOException{
    	List<MenuModel> models = new LinkedList<>();

    	Document doc = Jsoup.connect(url).get();
    	Elements menusBySection = doc.select(".section-body");
    	for (Element section : menusBySection) {
    		String sectionName  = section.select(".menu-section-header h3").text();
    		if (!StringUtils.isEmpty(sectionName)) {
    			Elements menus  = section.select(".menu-list").get(0).select(".menu-item");
    			for (Element menu : menus) {
    				String name = menu.select(".menu-name").text();
    				Elements summary = menu.select(".menu-summary li");

    				if (summary.size() >2) {
    					int price  = stringToInt(summary.get(0).select("p").get(0).text());
    					int kcal  = stringToInt(summary.get(0).select("p").get(1).text());
    					String area = summary.get(1).select("p").get(1).text();
    					boolean takeout = toBoolean(summary.get(2).select("p").get(1).text());
    					models.add(new MenuModel(name, price, kcal, area, takeout, sectionName));
    				} else if (summary.size() == 2) {
    					int price  = stringToInt(summary.get(0).select("p").get(0).text());
    					int kcal  = stringToInt(summary.get(0).select("p").get(1).text());
    					String area = "";
    					boolean takeout = toBoolean(summary.get(1).select("p").get(1).text());
    					models.add(new MenuModel(name, price, kcal, area, takeout, sectionName));
    				}

    			}
    		}
    	}

    	return models;
    }

    private static int stringToInt (String str) {
    	String intStr = str.replaceAll("[^0-9]", "");
    	return Integer.valueOf(intStr);
    }

    private static boolean toBoolean (String str) {
    	boolean res = true;
    	if (str.equals("不可")) {
    		res = false;
    	}
    	return res;
    }

    private static void RegisterToRDB(List<MenuModel> models) {
    	TransactionManager tm = RDBConfig.singleton().getTransactionManager();
    	MenuDao menuDao  = new MenuDaoImpl();
    	tm.required(() -> {
    		menuDao.deleteAll();
    		menuDao.insert(models);
    	});
    }
}
